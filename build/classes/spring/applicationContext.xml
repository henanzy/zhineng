<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">
	<context:annotation-config />
	<aop:aspectj-autoproxy />
	<!-- 扫描service层 -->
	<context:component-scan base-package="com.hnzy.*.service"></context:component-scan>
	<!-- 加载数据库配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 配置数据库连接池 -->
	<bean id="dse" class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close"
		p:url="${jdbc.url}"
	    p:username="${jdbc.user}" 
		p:password="${jdbc.password}"
		p:driverClassName="${jdbc.driver}" 
		p:maxActive="100" 
		p:maxIdle="20"
		p:maxWait="2000" />
		<!-- maxActive 最大连接数据库连接数，设置为0时没有限制   ,maxldle最大等待连接的数量 0没有限制，maxWait 最大等待秒数，超过时间会报出错误信息-->
    <bean id ="ds" class= "org.apache.commons.dbcp.BasicDataSource"  destroy-method="close" 
    	p:maxActive="100" 
		p:maxIdle="20"
		p:maxWait="2000" 
    >  
          <property name ="driverClassName" value= "oracle.jdbc.driver.OracleDriver"></property >  
          <property name ="url" value= "jdbc:oracle:thin:@218.29.157.150:1522:ORCL" ></property >  
          <property name ="username" value="charge_smx_qzj"> </property>  
          <property name ="password" value="charge_smx_qzj"></property>  
          <property name="validationQuery" value="select * from dual"/>
    </bean >  
  	
	<!-- 配置mybatis session工厂类，指定数据源，主配置文件，mapper映射文件，实体类所在包信息 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" 
		p:configLocation="classpath:mybatis/config.xml"
		p:mapperLocations="classpath:mybatis/mapper/*.xml"
		p:typeAliasesPackage="com.hnzy.*.pojo" 
		/>
<bean id ="dataSource" class= "com.hnzy.hot.socket.util.DynameicDataSource" >  
          <property name ="targetDataSources">  
                <map key-type ="java.lang.String">  
                      <entry value-ref ="dse" key= "dse"></entry >  
                      <entry value-ref ="ds" key= "ds"></entry >  
                </map >  
          </property >  
          <property name ="defaultTargetDataSource" ref= "dse"></property > 
   </bean>
	<!-- 指定dao接口所在位置，该类会根据接口和mapper配置文件自动创建接口的实现类，service层直接使用即可 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.hnzy.*.dao" />

	<!-- 事物管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- 切面编程  -->
	<aop:config>
		<aop:pointcut expression="execution(* com.hnzy.*.service.**.*(..))"
			id="serviceMethods" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
	</aop:config> 
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
		</tx:attributes>
	</tx:advice> 
	<bean id="myTest" class="com.hnzy.hot.controller.DsqTask"></bean>
	<bean id="cTest" class="com.hnzy.hot.controller.TimeSix"></bean>
<!-- 每隔五秒执行一次 -->
<task:scheduled-tasks> 

 <task:scheduled ref="myTest" method="doSomething" cron="0 0 */1 * * ?" />
 <task:scheduled ref="cTest" method="print" cron="0 0 12 * * ?" />
<!-- 每天中午早上六点 -->
 <task:scheduled ref="cTest" method="print" cron="0 0 6 * * ? " />
<!-- 每天中午晚上六点 -->
<task:scheduled ref="cTest" method="print" cron="0 0 18 * * ?" /> 
<!-- 每小时执行一次 -->

<!-- 每天中午晚上00点 -->
 <task:scheduled ref="cTest" method="print" cron="0 0 0 * * ?" /> 
<!--  每30分钟调用一次 获取天气预报 -->
<task:scheduled ref="cTest" method="tqyb" cron="0 0/30 * * * ?" />
  <task:scheduled ref="cTest" method="doSomething" cron="0/20 * *  * * ?" /> 
 
 </task:scheduled-tasks> 
</beans>


